--- 
title: "Joe's R Guide"
author: "Joe Mirza"
date: "`r Sys.Date()`"
site: bookdown::bookdown_site
documentclass: book
bibliography: [book.bib, packages.bib]
biblio-style: apalike
link-citations: yes
description: "This is a minimal example of using the bookdown package to write a book. The output format for this example is bookdown::gitbook."
---

# R Studio Environment

Understanding the R Studio environment. 

This is a _sample_ book written in **Markdown**. You can use anything that Pandoc's Markdown supports, e.g., a math equation $a^2 + b^2 = c^2$.

The **bookdown** package can be installed from CRAN or Github:

```{r eval=FALSE}
install.packages("bookdown")
library(tinytex)
library(tidyverse)
# or the development version
# devtools::install_github("rstudio/bookdown")
```

Remember each Rmd file contains one and only one chapter, and a chapter is defined by the first-level heading `#`.

To compile this example to PDF, you need XeLaTeX. You are recommended to install TinyTeX (which includes XeLaTeX): <https://yihui.org/tinytex/>.

```{r include=FALSE}
# automatically create a bib database for R packages
knitr::write_bib(c(
  .packages(), 'bookdown', 'knitr', 'rmarkdown'
), 'packages.bib')

squirrel_subset <- read.csv('squirrels_subset.csv')
```

## R Studio vs. R and R Markdown

The file type this is being written in is called R Markdown. It's a Markdown file that   
lets you insert and run R code in two types of places that are...not Markdown. 

The first type is a code chunk. It looks like this:

    `r ''````{r}
    
    ```
This is the most minimal sort of chunk. Three backticks, followed by r in brackets, 
ending in three backticks. Other instructions can follow the `r`. The most commonly used ones are:

1. Instructions that suppress certain types of content from being displayed
(e.g. `echo = FALSE` means prevents code, but not the results from appearing in the finished file.)

2. Captions for graphical results using `fig.cap = "..."`.

3. The ability to set the size and layout of the images. Much more about this in
plotting. 

Link to specifics here: [Code Chunks](https://rmarkdown.rstudio.com/lesson-3.html)

The other way you can insert R code into your markdown is 'inline'. Say you had a numeric variable you'd calculated above called `varname` and wanted to use  the value inline. You'd do that like so:    

    `r ''```r        `r varname`
    
Where the numeric value of `varname` would be inserted in that location. 

## RStudio and the File System

- Get the working directory: `getwd()`

- Set the working directory: `setwd("/home/jovyan/RBridge/")`

- Note that by hitting backslash in rstudio, it will provide you options for the
next directory in the file hierarchy

- List of files in current working directory: `list.files()`

## `ls()` vs. `list.files()`

- `ls()` gives you the list of variables in the global environment. 

- If you want to clear the local environmental variables, you would type `rm(list = ls())`. You probably could be forgiven for thinking it would've been `rm(ls())`, but no dice!

- Note that `ls()` is different from `list.files()`. `list.files()` lists the files in the *working directory*. `ls()` provides the variables in *working memory*.

## Handy Shortcuts

**Changing Focus between Source and Console Panels**

- To change focus to the source (where you write the code as full-fledged scripts): `ctrl-1`

- To change focus to the console (where you see the output or write one-off commands): `ctrl-2`


**What kind of object is this? (e.g. data.frame, data.table, vector?)**

  ```{r}
    typeof(squirrel_subset)
    class(squirrel_subset)
  ```

**Comment/Uncomment Code:**

    `shift + command + C`

**Keyboard shortcut to insert a code chunk:**

    `Cmd + Option + I`

    Gives you an empty code chunk:

    `r ''````{r}

    ```
Also note how one can display the code for a code chunk and not the    result.(Look in the source code to see how.)


**Getting Help**

- You can use `?` before a command to get help on a topic. For example:
  `?geom_point` returns a help page for that topic.
  
- You can also type `help(geom_point)` to achieve the same effect. 

**Installing and Loading Packages**

- To install a package (note the quotes around `zoo`): `install.packages('zoo')`

- To load that package and make it available (no quotes): `library(zoo)`

- The `::` specifies the package an object comes from, for example: `dplyr::mutate()`


**Clearing the console:** `Ctrl-L`.

